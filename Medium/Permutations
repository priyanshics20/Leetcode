Approach 1-------------------------------

class Solution {
    
    private void permutations(int[] nums , boolean[] freq , List<Integer> ds,List<List<Integer>> ans ){
        if(ds.size()==nums.length){
            ans.add(new ArrayList<>(ds));
            return;
        }
        for(int i=0;i<nums.length;i++){
            if(!freq[i]){
                freq[i]=true;
                ds.add(nums[i]);
                permutations(nums,freq,ds,ans);
                ds.remove(ds.size()-1);
                freq[i]= false;;
            }
        }
    }
    
public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> ds = new ArrayList<>();
        boolean freq[] = new boolean[nums.length];
        permutations(nums,freq,ds,ans);
        return ans;
    }
}

Approach 2-----------------------------------------------

class Solution {
    private void permutations(int idx,int[] nums ,List<List<Integer>> ans ){
        if(idx == nums.length){
            List<Integer> ds = new ArrayList<>();
            for(int i=0;i<nums.length;i++){
               ds.add(nums[i]);
            }
            ans.add(new ArrayList<>(ds));
            return;
        }
        for(int i=idx;i<nums.length;i++){
            swap(i,idx,nums);
            permutations(idx+1,nums,ans);
            swap(i,idx,nums);
        }
    }
    
    private void swap(int i, int j, int[] nums){
        int temp = nums[i];
        nums[i]=nums[j];
        nums[j]=temp;
    }
    
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        permutations(0,nums,ans);
        return ans;
    }
}
