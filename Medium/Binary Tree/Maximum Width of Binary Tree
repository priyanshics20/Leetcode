/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 class Pair{
    TreeNode node;
    int num;
    public Pair(TreeNode node , int num){
        this.node = node;
        this.num=num;
    }
 }
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        // width - no. of nodes in level btw any two node (not null)
        if(root == null)
            return 0;
        int ans=0;
        Queue<Pair> qu = new LinkedList<>();
        qu.add(new Pair(root,0));
        while(!qu.isEmpty()){
            int size = qu.size();
            int min = qu.peek().num;
            int first=0, last = 0;
            for(int i=0;i<size;i++){
                int cur_id = qu.peek().num - min;
                TreeNode node = qu.peek().node;
                qu.poll();
                if(i==0)
                    first=cur_id;
                if(i==size-1)
                    last = cur_id;
            
                if(node.left!=null){
                    qu.add(new Pair(node.left,2*cur_id+1));
                }
                if(node.right!=null){
                    qu.add(new Pair(node.right,2*cur_id+2));
                }
            }
            ans = Math.max(ans, last-first+1);
        }
        return ans;
    }
}
