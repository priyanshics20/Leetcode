/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

// Time Complexity: O(N)
// Assumption: Hashmap returns the answer in constant time.

//Space Complexity: O(N)
//Reason: We are using an external hashmap of size ‘N’.

class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        if(inorder == null || postorder == null || postorder.length!= inorder.length)
            return null;
        
        HashMap<Integer, Integer> hm = new HashMap<>();
        for(int i=0;i<inorder.length;i++){
            hm.put(inorder[i],i);
        }

        return buildTree(inorder, 0, inorder.length-1 , postorder, 0, postorder.length-1, hm);
    }
    
    public TreeNode buildTree(int[] inorder, int is, int ie, int[]postorder, int ps, int pe , Map<Integer, Integer> hm){
        if(is>ie || ps>pe)
            return null;
        
        TreeNode root = new TreeNode(postorder[pe]);
        int inroot_idx = hm.get(postorder[pe]);
        int numsleft = inroot_idx - is;
        root.left = buildTree(inorder, is, inroot_idx-1, postorder, ps, ps +numsleft-1,hm);
        root.right = buildTree(inorder, inroot_idx+1, ie,postorder , ps+numsleft, pe-1 ,hm);

        return root;
    }
}
