/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        Map<Integer, Integer> hm = new HashMap<>();
        for(int i=0;i<inorder.length;i++){
            hm.put(inorder[i],i);
        }
        TreeNode root = buildTree(preorder,inorder,0,inorder.length-1,0,preorder.length-1,hm);
        return root;
    }

    public TreeNode buildTree(int []preorder, int[]inorder, int instart, int inend, int prestart, int preend, Map<Integer,Integer> hm){
        if(prestart>preend || instart>inend)
            return null;
        
        TreeNode root = new TreeNode(preorder[prestart]);
        //we get the index of root value from inorder array in inroot
        int inroot = hm.get(root.val);
        //preorder = [3,9,20,15,7], inorder = [9,3,15,20,7] so we get in inroot = 1 and in
        // numsleft jo root ke phle hoga bo leftSubtree hoga toh uski range nikalenge (inroot - instart) krke
        int numsleft = inroot - instart;

        root.left = buildTree(preorder, inorder, instart, inroot-1,prestart+1,prestart+numsleft,hm);
        root.right = buildTree(preorder, inorder, inroot+1, inend,prestart+numsleft+1,preend,hm);

        return root;
    }

}
